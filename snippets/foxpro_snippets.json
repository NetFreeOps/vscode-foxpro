{
	"local select": {
		"prefix": "lnsel",
		"body": [
			"LOCAL lnOldSel",
			"lnOldSel = SELECT()",
			"$0",
			"SELECT (lnOldSel)"
		],
		"description": "basic set up for selecting the current area into a variable and then restoring to that area"
	},

	"case statement": {
		"prefix": "docase",
		"body": [
			"DO CASE",
			"\tCASE ${1:condition}",
			"\t\t",
			"\tCASE ${2:condition}",
			"\t\t",
			"\tOTHER",
			"\t\t",
			"ENDCASE"
		],
		"description": "basic set up for selecting the current area into a variable and then restoring to that area"
	},

	"Procedure": {
		"prefix": "prc",
		"body": [
            "* ** ${1:ProcedureName} **",
            "* ${3:Procedure description}",
			"PROCEDURE ${1} ($2)",
			"\t$0",
			"ENDPROC"
		],
		"description": "Simple foxpro procedure call"
	},

    // [internal]
	"fSelectStatement": {
		"prefix": "fs",
		"body": [
			"WITH fSelectStatement('${1:file}')",
			"\t$0",
			"ENDWITH"
		],
		"description": "Simple fSelectStatment"
	},

    // [internal]
	"fSelectStatement.IntoObject": {
		"prefix": "fso",
		"body": [
			"WITH fSelectStatement('${1:file}')",
			"\t$0",
			"\t${2:loData} = .IntObject()",
			"ENDWITH"
		],
		"description": "Simple fSelectStatment with an output IntoObject"
	},

    // [internal]
	"fSelectStatement.IntoValue": {
		"prefix": "fsv",
		"body": [
			"WITH fSelectStatement('${1:file}')",
			"\t.Fields('${2:field}')",
			"\t$0",
			"\t${3:lcValue} = .IntoValue()",
			"ENDWITH"
		],
		"description": "Simple fSelectStatment with an output IntoObject"
	},

    // [internal]
	"fUpdateStatement": {
		"prefix": "fup",
		"body": [
			"WITH fUpdateStatement('${1:file}')",
			"\t.Set('${2:field}',${3:value})",
			"\t.Where('${4:field}',${5:value})",
			"\t$0",
			"\t.Execute()",
			"ENDWITH"
		],
		"description": "Simple fUpdateStatement"
	},

    // [internal]
	"fInsertStatement": {
		"prefix": "fin",
		"body": [
			"WITH fInsertStatement('${1:file}')",
			"\t.Set('${2:field}',${3:value})",
			"\t$0",
			"\t.Execute()",
			"ENDWITH"
		],
		"description": "Simple fUpdateStatement"
	},

    // [internal]
	"fDeleteStatement": {
		"prefix": "fdel",
		"body": [
			"WITH fDeleteStatement('${1:file}')",
			"\t.Where('${2:field}',${3:value})",
			"\t.Execute()",
			"ENDWITH"
		],
		"description": "Simple fUpdateStatement"
	},

	"Define Class": {
		"prefix": "dc",
		"body": [
			"DEFINE CLASS ${1:ClassName} AS ${2:ParentClass}",
			"$2",
			"\tPROCEDURE ${4:Init} ()",
			"\t\t$0",
			"\tENDPROC",
			"ENDDEFINE"
		],
		"description": "Define class with no external file reference"
	},

	"Define Class Of": {
		"prefix": "dco",
		"body": [
			"DEFINE CLASS ${1:ClassName} AS ${2:ParentClass} OF ${2}.fxp",
			"",
			"\tPROCEDURE ${3:Init} ()",
			"\t\t$0",
			"\tENDPROC",
			"ENDDEFINE"
		],
		"description": "Define class with external file reference"
	},

	"Instantiable Class Object File": {
		"prefix": "dcf",
		"body": [
			"PROCEDURE ${TM_FILENAME_BASE} (${3:tcParam})",
			"\tRETURN CREATEOBJECT('${1}',${3})",
			"ENDPROC",
			"",
			"DEFINE CLASS ${1:${TM_FILENAME_BASE}} AS ${2:ParentClass} OF ${2}.fxp",
			"\t$4",
			"\tPROCEDURE Init (${3})",
			"\t\t$0",
			"\tENDPROC",
			"ENDDEFINE"
		],
		"description":"Define class with functional call to instantiate"
	},
    
    // multiprompt
    // [internal]
    "Multiprompt Definition": {
        "prefix": "multi",
        "body": [
            "TEXT TO ${1:lcFields} ADDITIVE TEXTMERGE NOSHOW FLAGS 3 PRETEXT 3",
            "\t$0",
            "ENDTEXT",
            "${2:loResult} = MultiPrompt($1,${3:'Dialog Caption'})",
            "",
            "IF VARTYPE(${2})#'O'",
            "\tRETURN .f.",
            "ENDIF"
        ],
        "description":"Multiprompt definition"
    },

    "Multiprompt Text Field": {
        "prefix": "mptext",
        // TextProduct ~C Product ~E <<rcProduct>> ~W <<! SYSONEPROD>> ~V qck('qckprod',@{1})
        "body": "${1:TextFieldName} ~C ${2:Caption} ~E <<${3:pcInitialValue}>> ~V ${4:ValidEvent(@{1})}",
        "description": "Generic text field definition for multiprompt"
    },

    "Multiprompt Text Name": {
        "prefix": "mpname",
        "body": "${1:TextName} ~C ${2:Caption} ~EC <<${3:pcInitialValue}>>",
        "description": "Text field allowing for lowercase letters for multiprompt"
    },

    "Multiprompt Number Field": {
        "prefix": "mpnum",
        "body": "${1:TextNumber} ~C ${2:Caption} ~EN <<${3:pnInitialValue}>> ~F R ~M ${4:999,999.99}",
        "description": "Text field that accepts numbers for multiprompt"
    },

    "Multiprompt Date Field": {
        "prefix": "mpdate",
        "body": "${1:TextDate} ~C ${2:Caption} ~ED <<${3:pdInitialValue}>>",
        "description": "Text field that accepts numbers for multiprompt"
    },

    "Multiprompt List Field": {
        "prefix": "mplist",
        "body": "${1:ListFieldName} ~C ${2:Caption} ~EC <<${3:pcInitialValue}>> ~T LIST ~L ${4:Element 1,Element 2}",
        "description": "Generic list field definition for multiprompt"
    },

    "Multiprompt Check Field": {
        "prefix": "mpcheck",
        "body": "${1:CheckFieldName} ~C ${2:Caption} ~EL <<${3:pbInitialValue}>> ~T Check",
        "description": "Generic checkbox field definition for multiprompt"
    },
    "Multiprompt Group Field": {
        "prefix": "mpgroup",
        // GroupContract ~T GROUP ~F LAYOUT ~SH MIDDLE 10
        "body": "${1:GroupName} ~T Group ~F Layout ~S${2|V,H|} 10",
        "description": "Generic group definition for multiprompt"
    },

    "Multiprompt Label Field": {
        "prefix": "mplabel",
        //LabelMustBeAccount ~T LABEL ~C <<qw(tcAccount)>> ~B FIXED,10,N ~G GroupAccount
        "body": "${1:LabelName} ~T LABEL ~C ${2:Caption} ~EC <<${3:lcLabelContent}>> ~B FIXED,10,N",
        "description": "Generic checkbox field definition for multiprompt"
    },

    "Multiprompt Range Field": {
        "prefix": "mprange",
        //PurchaseRange ~C From ~T Range ~E <<rcPurchaseRangeLow>>||<<rcPurchaseRangeHigh>> ~W {CheckPurchase} ~G PurchaseGroup
        "body": "${1:RangeName} ~T RANGE ~C ${2:From} ~E <<${3:lcRangeLow}>>||<<${4:lcRangeHigh}>>",
        "description": "Generic range entry field definition for multiprompt"
    },

    "Multiprompt Note Field": {
    "prefix": "mpnote",
    //    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
    "body": "${1:MemoName} ~T EDIT ~C ${2:Caption} ~@C <<${3:pcNote}>>",
    "description": "Generic memo field definition for multiprompt"
},
}